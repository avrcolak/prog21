#!/usr/bin/perl
use 5.016;
use Cwd;

my $URL = 'http://prog21.dadgum.com';
my $CWD = cwd;

sub load {local (@ARGV, $/) = @_; <>}

sub save {
	my $f = "site/" . shift;
	my $s = join '', @_;
	unless (-e $f and -s $f == length($s) and $s eq load($f)) {
		open my $h, '>', $f; print $h $s; close $h;
		chmod 0644, $f;
	}
}

my ($HEAD,$FOOT) = split /~/, "<!DOCTYPE html>\n" . load('p21.html') =~ s/\n\t*//gr;

my (@Titles, @Dates);
my $Latest = do {
	my $f = load 'titles';
	@Dates = (0, $f =~ /^(....-..-..)/gm);
	@Titles = (0, $f =~ / (.+)$/gm);
} - 1;

my @Months = qw(January February March April May June July August September October November December);
my %Types = ('---' => 'code', '"""' => 'quote');

sub long_date {
	my ($y, $m, $d) = shift =~ /(\d+)-(\d+)-0*(\d+)/;
	$Months[$m - 1] . " $d, $y";
}

sub parse {
    my @p = split /^(---|""")\n/m, $_[0];
	chomp for @p;
    my @acc;
    while (@p) {
		my $a = shift @p;
		if ($Types{$a}) {
			my ($b, $c) = splice @p, 0, 2;
			$a eq $c or die "mismatched $a\n";
			push @acc, [$Types{$a}, $b];
		} else {
			push @acc, ['prose', $a];
		}
    }
    @acc;
}

sub prose {
	map {
		s:<\|:<code>:g;
		s:\|>:</code>:g;
		/^<[phu]/ ? s/\n//gr : "<p>$_</p>"
	} split /\n\n/, $_[0];
}

sub code {
	map {
		s/\t/   /g;
		s/&/&amp;/g;
		s/</&lt;/g;
		s/>/&gt;/g;
		$_
	} @_;
}

sub gen_text {
	my %f = (
		prose => sub {prose($_[0])},
		code => sub {('<pre>', code($_[0]), '</pre>')},
		quote => sub {('<blockquote>', prose($_[0]), '</blockquote>')}
	);
 	map {$f{$_->[0]}->($_->[1])} parse load "entries/@_.html";
}

sub gen_prev {
	my ($n) = @_;
	my @p = reverse map {qq[<li><a href="$_.html">$Titles[$_]</a>]} grep {$_ > 0} $n-5..$n-1;
	@p ? ('<ul><h1>previously</h1>', @p, '</ul>') : ();
}

sub gen_page {
	my ($n) = @_;
	my $d = long_date $Dates[$n];
	my $t = $Titles[$n];
	my @core = ("<h1>$t</h1>", gen_text($n), qq{<p class="s"><a href="$n.html" id="perm">permalink</a> <i>$d</i></p>},
		gen_prev($n), $FOOT);
 	save "$n.html", $HEAD =~ s/X/$t/r, @core;
	save "index.html", $HEAD =~ s/X/Programming in the 21st Century/r, @core if $n == $Latest
}

sub gen_archive {
	my ($last, @out);
	for my $i (reverse 1..$Latest) {
		my $year = substr $Dates[$i], 0, 4;
		push @out, "<h1>$year</h1>" if $year ne $last;
		push @out, qq|<a href="$i.html">$Titles[$i]</a>|;
		$last = $year;
	}
	save "archives.html", $HEAD =~ s/X/Complete Archives/r, '<div class="ab">', @out, "</div>$FOOT";
}

my $ATOM = <<END;
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Programming in the 21st Century</title>
<link rel="self" href="$URL/atom.xml"/>
<link rel="alternate" href="$URL/"/>
<id>$URL/</id>
END

sub abs_url {
	my $u = shift;
	$u =~ /:/ ? $u : "$URL/$u";
}

sub gen_feed {
	my $n = $Latest;
	my $t = 'T00:00:00-06:00';
	my @out = map {
		my $body = join('', gen_text $_) =~ s/((href|src)=")(.+?)"/$1 . abs_url($3) . '"'/ger;
		my $time = "$Dates[$_]$t";
		<<END;
<entry>
<title>$Titles[$_]</title>
<link rel="alternate" type="text/html" href="$URL/$_.html"/>
<id>$URL/$_.html</id>
<published>$time</published>
<updated>$time</updated>
<author><name>James Hague</name></author>
<content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">$body</div></content>
</entry>
END
	} reverse grep {$_ > 0} $n-2..$n;
	save 'atom.xml', $ATOM, "<updated>$Dates[$n]$t</updated>\n", @out, '</feed>';
}


symlink "$CWD/images", "site/images";

my @pages;
if (@ARGV == 0) {
	@pages = $Latest;
} elsif (@ARGV == 1 && $ARGV[0] eq 'all') {
	@pages = 1..$Latest;
} else {
	@pages = map {
		(/^(\d+)$/ and $Titles[$1]) or die "gen [1-$Latest...|all]\n";
		$1;
	} @ARGV;
}

gen_page $_ for @pages;
gen_feed;
gen_archive;
